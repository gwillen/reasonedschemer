#lang racket

(require (planet dfriedman/miniKanren/minikanren))
(define succeed (== #t #t))
(define fail (== #t #f))
(define (caro l x)
  (fresh (xs)
     (== (cons x xs) l)))
(define (cdro l xs)
  (fresh (x)
     (== (cons x xs) l)))
(define (conso x xs l)
  (== (cons x xs) l))
(define (nullo x)
  (== x '()))
(define (pairo p)
  (fresh (a b)
         (conso a b p)))
(define (listo l)
  (conde
      ((nullo l))
      ((pairo l)
       (fresh (d)
           (cdro l d)
           (listo d)))))
(define (membero x l)
  (conde
   ((caro l x))
   ((fresh (d)
           (cdro l d)
           (membero x d)))))
(define (rembero x l out)
  (conde
   ((nullo l) (nullo out))
   ((caro l x) (cdro l out))
   ((fresh (res d a)
           (conso a d l)
           (rembero x d res)
           (conso a res out)))))
(define (surpriseo s)
  (rembero s '(a b c) '(a b c)))
(define (appendo l s out)
  (conde
   ((nullo l) (== s out))
   ((fresh (a d res)
           (conso a d l)
           (appendo d s res)
           (conso a res out)))))
